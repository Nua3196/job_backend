openapi: 3.0.0
info:
  title: Authentication, Company, Job, Statistics, and User API
  description: API for managing user authentication, company records, job postings, statistical data, and user interactions.
  version: 1.0.0
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  /api/auth/logout:
    post:
      tags:
        - Auth
      summary: "User Logout"
      description: >
        Logs out a user by invalidating their Access and Refresh tokens.
        - Access Token is automatically verified using `jwt_required`.
        - Refresh Token is validated separately and added to the blacklist.
        - Any subsequent use of these tokens will result in a `403 Forbidden` error.
      security:
        - bearerAuth: []  # Access Token 인증 필요
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  description: "The Refresh Token to invalidate."
              required:
                - refresh_token
      responses:
        200:
          description: >
            "Logged out successfully. Both Access and Refresh tokens have been invalidated."
        400:
          description: >
            "Invalid or missing Refresh Token."
        401:
          description: >
            "Invalid or expired Refresh Token."
        500:
          description: >
            "An internal server error occurred."
  /api/auth/signup:
    post:
      tags:
        - Auth
      summary: User Signup
      description: Creates a new user account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                role:
                  type: string
                  enum: ["admin", "employer", "applicant"]
                  example: "applicant"
                company_name:
                  type: string
                  description: Required if the role is employer.
                company_link:
                  type: string
                  description: Required if the role is employer.
      responses:
        201:
          description: User created successfully.
        400:
          description: Validation error.
        500:
          description: Internal server error.
  /api/auth/login:
    post:
      tags:
        - Auth
      summary: User Login
      description: Logs in a user and provides access and refresh tokens.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: Login successful.
        401:
          description: Invalid credentials.
        500:
          description: Internal server error.
  /api/auth/refresh:
    post:
      tags:
        - Auth
      summary: "Token Refresh"
      description: >
        Refreshes the access token using a valid refresh token.
        - The refresh token is validated using `decode_token`, which checks:
          1. Whether the token is expired.
          2. Whether the token is blacklisted.
        - If valid, a new Access Token will be issued.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refresh_token:
                  type: string
                  description: "The Refresh Token to use for generating a new Access Token."
              required:
                - refresh_token
      responses:
        200:
          description: >
            "New access token generated successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                    description: "The newly generated Access Token."
        400:
          description: >
            "Refresh Token is missing."
        401:
          description: >
            "Invalid or expired Refresh Token."
        403:
          description: >
            "Refresh Token is blacklisted or has been logged out."
        500:
          description: >
            "An internal server error occurred."
  /api/companies/:
    get:
      tags:
        - Company
      summary: List all companies
      description: Fetch a list of all companies.
      responses:
        200:
          description: List of companies fetched successfully.
        500:
          description: Internal server error.
    post:
      tags:
        - Company
      summary: "Add a new company"
      description: "Create a new company record."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "Name of the company."
                link:
                  type: string
                  description: "Link to the company website."
      responses:
        201:
          description: "Company created successfully."
        400:
          description: "Validation error."
        500:
          description: "Internal server error."
  /api/companies/{company_id}:
    get:
      tags:
        - Company
      summary: Get company details
      description: Fetch details of a specific company by its ID.
      parameters:
        - in: path
          name: company_id
          required: true
          schema:
            type: integer
          description: ID of the company to fetch.
      responses:
        200:
          description: Company details fetched successfully.
        404:
          description: Company not found.
        500:
          description: Internal server error.
    put:
      tags:
        - Company
      summary: "Update company details"
      description: "Update details of an existing company."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: company_id
          required: true
          schema:
            type: integer
          description: "ID of the company to update."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: "New name of the company."
                link:
                  type: string
                  description: "New link to the company website."
      responses:
        200:
          description: "Company updated successfully."
        400:
          description: "Validation error."
        500:
          description: "Internal server error."
    delete:
      tags:
        - Company
      summary: "Delete a company"
      description: "Delete a company by its ID."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: company_id
          required: true
          schema:
            type: integer
          description: "ID of the company to delete."
      responses:
        200:
          description: "Company deleted successfully."
        400:
          description: "Validation error."
        500:
          description: "Internal server error."
  /api/jobs/:
    get:
      tags:
        - Jobs
      summary: List Jobs
      description: Retrieve a list of jobs with pagination and sorting.
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number.
        - in: query
          name: size
          schema:
            type: integer
            default: 20
          description: Number of items per page.
        - in: query
          name: sort_by
          schema:
            type: string
            default: "id"
          description: Field to sort by.
        - in: query
          name: order
          schema:
            type: string
            enum: [asc, desc]
            default: "desc"
          description: Sort order.
      responses:
        200:
          description: List of jobs retrieved successfully.
        500:
          description: Internal server error.
    post:
      tags:
        - Jobs
      summary: "Add a Job"
      description: "Create a new job posting."
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: "Title of the job."
                link:
                  type: string
                  description: "Link to the job posting."
                career_condition:
                  type: string
                  description: "Career condition required for the job."
                education:
                  type: string
                  description: "Education level required for the job."
                deadline:
                  type: string
                  description: "Application deadline for the job."
                job_sector:
                  type: string
                  description: "Sector of the job."
                company:
                  type: integer
                  description: "Company ID (required for admin users)."
                tech_ids:
                  type: array
                  items:
                    type: integer
                  description: "List of technology IDs associated with the job."
                location_ids:
                  type: array
                  items:
                    type: integer
                  description: "List of location IDs associated with the job."
      responses:
        201:
          description: "Job created successfully."
        400:
          description: "Validation error."
        500:
          description: "Internal server error."
  /api/jobs/{job_id}:
    get:
      tags:
        - Jobs
      summary: Get Job Details
      description: Retrieves detailed information for a specific job.
      parameters:
        - in: path
          name: job_id
          required: true
          schema:
            type: integer
          description: The ID of the job to retrieve details for.
      responses:
        200:
          description: Job details returned successfully.
        404:
          description: Job not found.
        500:
          description: Internal server error.
    put:
      tags:
        - Jobs
      summary: "Update Job"
      description: "Updates an existing job posting."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: job_id
          required: true
          schema:
            type: integer
          description: "The ID of the job to update."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                company:
                  type: integer
                creator:
                  type: integer
                career_condition:
                  type: string
                education:
                  type: string
                deadline:
                  type: string
                job_sector:
                  type: string
                tech_ids:
                  type: array
                  items:
                    type: integer
                  description: "List of technology IDs to associate with the job."
                location_ids:
                  type: array
                  items:
                    type: integer
                  description: "List of location IDs to associate with the job."
      responses:
        200:
          description: "Job updated successfully."
        400:
          description: "Validation error."
        500:
          description: "Internal server error."
    delete:
      tags:
        - Jobs
      summary: "Delete Job"
      description: "Deletes a job posting."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: job_id
          required: true
          schema:
            type: integer
          description: "The ID of the job to delete."
      responses:
        200:
          description: "Job deleted successfully."
        404:
          description: "Job not found."
        500:
          description: "Internal server error."
  /api/jobs/search:
    get:
      tags:
        - Jobs
      summary: "Search Jobs"
      description: >
        Searches and filters job postings based on various criteria.
        - **keyword**: Performs partial match search for job titles or company names.
        - **career_condition**: Performs partial match search for career conditions (e.g., '3년').
      parameters:
        - in: query
          name: keyword
          schema:
            type: string
          description: "Search keyword for job titles or company names (partial match)."
        - in: query
          name: location
          schema:
            type: string
          description: "Location filter (ID)."
        - in: query
          name: tech
          schema:
            type: string
          description: "Technology filter (ID)."
        - in: query
          name: career_condition
          schema:
            type: string
          description: "Keyword for career condition (partial match)."
      responses:
        200:
          description: "Search results returned successfully."
        500:
          description: "Internal server error."
  /api/jobs/{job_id}/applications:
    get:
      tags:
        - Job Applications
      summary: "List Applications for a Job"
      description: >
        Retrieves a list of applications for a specific job. 
        Only accessible by the job creator.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: job_id
          required: true
          schema:
            type: integer
          description: "The ID of the job to retrieve applications for."
      responses:
        200:
          description: "List of applications retrieved successfully."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    user:
                      type: integer
                    email:
                      type: string
                    role:
                      type: string
                      enum: ["admin", "employer", "applicant"]
                    content:
                      type: string
                      description: "The content of the application."
                    created_at:
                      type: string
                      format: date-time
        403:
          description: "Permission denied."
        404:
          description: "Job not found or no applications."
        500:
          description: "Internal server error."
  /api/stats/companies:
    get:
      tags:
        - Statistics
      summary: Company Statistics
      description: Retrieves the number of job postings for each company.
      responses:
        200:
          description: Company statistics retrieved successfully.
        500:
          description: Internal server error.
  /api/stats/techs:
    get:
      tags:
        - Statistics
      summary: Technology Statistics
      description: Retrieves the number of job postings for each technology.
      responses:
        200:
          description: Technology statistics retrieved successfully.
        500:
          description: Internal server error.
  /api/stats/jobs:
    get:
      tags:
        - Statistics
      summary: Job Application Statistics
      description: Retrieves the number of applications for each job posting.
      responses:
        200:
          description: Job application statistics retrieved successfully.
        500:
          description: Internal server error.
  /api/users/{user_id}:
    get:
      tags:
        - Users
      summary: "Get User Details"
      description: "Retrieve details of a specific user by their ID."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          description: "The ID of the user to retrieve."
      responses:
        200:
          description: "User details retrieved successfully."
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
                  role:
                    type: string
                    enum: ["admin", "employer", "applicant"]
                  company:
                    type: integer
                    nullable: true
                  created_at:
                    type: string
                    format: date-time
        403:
          description: "Permission denied."
        404:
          description: "User not found."
        500:
          description: "Internal server error."
    put:
      tags:
        - Users
      summary: "Update User Information"
      description: >
        Allows a user to update their own information.
        Admin users can update any user's information, including roles.
        Non-admin users can only update their own information, such as passwords.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          description: "The ID of the user to update."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "New email for the user."
                password:
                  type: string
                  description: "New password for the user."
                role:
                  type: string
                  enum: ["admin", "employer", "applicant"]
                  description: "New role for the user (Admins only)."
                company:
                  type: integer
                  description: "New company ID for the user (Admins or Employers only)."
      responses:
        200:
          description: "User updated successfully."
        400:
          description: >
            Validation error. For example, password does not meet the minimum length.
        403:
          description: >
            Permission denied. Non-admin users cannot update roles or other users' information.
        500:
          description: "Internal server error."
    delete:
      tags:
        - Users
      summary: "Delete User"
      description: "Allows a user to delete their own account. Admins can delete any user's account."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          description: "The ID of the user to delete."
      responses:
        200:
          description: "User account deleted successfully."
        403:
          description: "Permission denied."
        404:
          description: "User not found."
        500:
          description: "Internal server error."
  /api/users/{user_id}/bookmarks:
    post:
      tags:
        - User Bookmarks
      summary: "Toggle Bookmark"
      description: "Adds or removes a bookmark for a job posting."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          description: "The ID of the user."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                job_id:
                  type: integer
                  description: "The ID of the job to bookmark."
      responses:
        200:
          description: "Bookmark toggled successfully."
        400:
          description: "Validation error."
        403:
          description: "Permission denied."
    get:
      tags:
        - User Bookmarks
      summary: "List Bookmarks"
      description: "Retrieves the list of bookmarked job postings for a user."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          description: "The ID of the user."
      responses:
        200:
          description: "Bookmarks retrieved successfully."
        403:
          description: "Permission denied."
  /api/users/{user_id}/applications:
    post:
      tags:
        - User Applications
      summary: "Add Application"
      description: "Adds a new job application for a user."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          description: "The ID of the user."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                job_id:
                  type: integer
                  description: "The ID of the job to apply for."
                content:
                  type: string
                  description: "The content of the application."
      responses:
        201:
          description: "Application added successfully."
        400:
          description: "Validation error."
        403:
          description: "Permission denied."
    get:
      tags:
        - User Applications
      summary: "List Applications"
      description: "Retrieves the list of job applications for a user."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          description: "The ID of the user."
      responses:
        200:
          description: "Applications retrieved successfully."
        403:
          description: "Permission denied."
  /api/users/{user_id}/applications/{job_id}:
    delete:
      tags:
        - User Applications
      summary: "Delete Application"
      description: "Deletes a job application for a user."
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
          description: "The ID of the user."
        - in: path
          name: job_id
          required: true
          schema:
            type: integer
          description: "The ID of the job application to delete."
      responses:
        200:
          description: "Application deleted successfully."
        403:
          description: "Permission denied."